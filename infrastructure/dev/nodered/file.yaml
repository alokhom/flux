---
# Source: node-red/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: node-red/templates/npmrc-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: abcd-node-red-npmrc-cm
  namespace: "node-red"
data:
  npmrc: |
    registry=https://registry.npmjs.org
    # Custom npmrc config
---
# Source: node-red/templates/sidecar-cm.yaml
apiVersion: v1
data:
  flow_refresh.py: |
    #!/usr/bin/env python

    import time
    import os
    import requests
    from requests.adapters import HTTPAdapter
    from requests.packages.urllib3.util.retry import Retry
    import json
    import sys
    import re

    # SET VARIABLES FROM CONTAINER ENVIRONMENT
    SLEEP_TIME_SIDECAR = 5 if os.getenv("SLEEP_TIME_SIDECAR") is None else int(
        re.sub("[A-z]", "", os.getenv("SLEEP_TIME_SIDECAR")))
    USERNAME = os.getenv("USERNAME")
    PASSWORD = os.getenv("PASSWORD")
    URL = os.getenv("URL")
    # REQUEST CONNECTION PARAMETERS
    FLOW_REQ_RETRY_TOTAL = 20 if os.getenv("REQ_RETRY_TOTAL") is None else int(os.getenv("REQ_RETRY_TOTAL"))
    FLOW_REQ_RETRY_CONNECT = 30 if os.getenv("REQ_RETRY_CONNECT") is None else int(os.getenv("REQ_RETRY_CONNECT"))
    FLOW_REQ_RETRY_READ = 15 if os.getenv("REQ_RETRY_READ") is None else int(os.getenv("REQ_RETRY_READ"))
    FLOW_REQ_RETRY_BACKOFF_FACTOR = 1.1 if os.getenv("REQ_RETRY_BACKOFF_FACTOR") is None else float(
        os.getenv("REQ_RETRY_BACKOFF_FACTOR"))
    FLOW_REQ_TIMEOUT = 60 if os.getenv("REQ_TIMEOUT") is None else float(os.getenv("REQ_TIMEOUT"))
    FLOW_REQ_TLS_VERIFY = False if os.getenv("REQ_SKIP_TLS_VERIFY") == "true" else None

    EXTRA_NODE_MODULES = None if os.path.isfile('/data/extra-node-modules.json') is False else json.load(
        (open('/data/extra-node-modules.json', "r")))
    script_errors = {}


    def main():
        print("----START PYTHON SIDECAR SCRIPT----")
        print("node-red node module install and flow refresh api call via k8s-sidecar")
        print(f"sidecar sleeping for {SLEEP_TIME_SIDECAR} seconds...")
        time.sleep(SLEEP_TIME_SIDECAR)

        # REQUESTS INIT SESSION
        r = requests.Session()
        retries = Retry(
            total=FLOW_REQ_RETRY_TOTAL,
            connect=FLOW_REQ_RETRY_CONNECT,
            read=FLOW_REQ_RETRY_READ,
            backoff_factor=FLOW_REQ_RETRY_BACKOFF_FACTOR,
        )
        r.mount("http://", HTTPAdapter(max_retries=retries))
        r.mount("https://", HTTPAdapter(max_retries=retries))

        # Make the request
        authenticationScheme = r.get(
            "%s" % URL + "/auth/login",
        )

        try:
            data = authenticationScheme.json()
        except json.JSONDecodeError:
            print("Received non-JSON response.")
            sys.exit(1)

        # Check if the data is an empty object
        if data == {}:
            print("Empty authentication scheme response.")
            token = None
        else:
            # GET NODE RED BEARER TOKEN
            print("----TOKEN----")
            payload_token = {
                "client_id": "node-red-admin",
                "grant_type": "password",
                "scope": "*",
                "username": USERNAME,
                "password": PASSWORD,
            }
            r_token = r.post(
                "%s" % URL + "/auth/token",
                data=payload_token,
                timeout=FLOW_REQ_TIMEOUT,
                verify=FLOW_REQ_TLS_VERIFY,
            )
            if r_token.status_code == requests.codes.ok:
                print(f"node-red bearer token successfully created - {r_token.status_code}")
                token = json.loads(r_token.text)["access_token"]
            else:
                print(f"could not create bearer token.... {r_token.status_code}")
                sys.exit(r_token.status_code)

        # NODE MODULE INSTALL VIA HELM SIDECAR EXTRA NODE MODULES CONFIG MAP
        print("----INSTALL EXTRA NODE MODULES----")
        if EXTRA_NODE_MODULES is not None:
            print(f"found extra node modules in configmap - {EXTRA_NODE_MODULES}")
            # GET ISNTALLED NODE MODULES
            headers_node_module = {
                "Accept": "application/json",
            }
            if token:
                # If token has a value, add Authorization to headers
                headers_node_module["Authorization"] = "Bearer" + " " + token
            r_node_modules = r.get(
                "%s" % URL + "/nodes",
                headers=headers_node_module,
                timeout=FLOW_REQ_TIMEOUT,
                verify=FLOW_REQ_TLS_VERIFY,
            )
            node_modules = json.loads(r_node_modules.text)
            # PARSE ALL INSTALLED MODULES FROM EVERY ARRAY AN SET AS UNIQUE LIST FROM AKTIVE NODE RED DEPLOYEMNT
            modules_installed = list(set([item.get("module") for item in node_modules]))
            print(f"currently installed node modules - {modules_installed}")

            for module in EXTRA_NODE_MODULES:
                if module not in modules_installed:
                    payload_node_module = '{"module": "' + module + '"}'
                    headers_node_module = {
                        "Content-type": "application/json",
                    }
                    if token:
                        # If token has a value, add Authorization to headers
                        headers_node_module["Authorization"] = "Bearer" + " " + token
                    # INSTALL NODE MODULES FROM ITERATION
                    r_node_modules = r.post(
                        "%s" % URL + "/nodes",
                        headers=headers_node_module,
                        data=payload_node_module,
                        timeout=FLOW_REQ_TIMEOUT,
                        verify=FLOW_REQ_TLS_VERIFY,
                    )
                    if r_node_modules.status_code == requests.codes.ok:
                        print(f"node module {module} successfully installed -  {r_node_modules.status_code}")
                    else:
                        print(f"error-status-code = {r_node_modules.status_code} while installing {module}")
                        script_errors.update({module: r_node_modules.status_code})
                        # sys.exit at the end! Non hard exit.
                else:
                    print(f"node module {module} already installed...")
        else:
            print("no extra node-modules found from configmap ...")
            print("skipping extra node modules installation...")

        # FLOW REFRESH/RELOAD FLOWS FROM SECRET/CONFIGMAP
        print("----RELOAD FLOWS----")
        payload_flow_refresh = '{"flows": [{"type": "tab"}]}'
        headers_flow_refresh = {
            "content-type": "application/json; charset=utf-8",
            "Node-RED-Deployment-Type": "reload",
            "Node-RED-API-Version": "v2",
        }
        if token:
            # If token has a value, add Authorization to headers
            headers_flow_refresh["Authorization"] = "Bearer" + " " + token

        r_flow_refresh = r.post(
            "%s" % URL + "/flows",
            headers=headers_flow_refresh,
            data=payload_flow_refresh,
            timeout=FLOW_REQ_TIMEOUT,
            verify=FLOW_REQ_TLS_VERIFY,
        )

        if r_flow_refresh.status_code == requests.codes.ok:
            print(f"node-red flows successfully reloaded - {r_flow_refresh.status_code}")
        else:
            print(f"could not refresh flows - {r_flow_refresh.status_code}")
            script_errors.update({"flow_refresh": r_flow_refresh.status_code})
            # sys.exit(r_flow_refresh.status_code)

        # NODE MODULE INSTALL VIA HELM SIDECAR EXTRA ENVIROMENT
        print("----SCRIPT EXIT----")
        if script_errors:
            print(json.dumps(script_errors, indent=4))
            sys.exit("script errors found...")
        else:
            print("no script errors found...")
            sys.exit(0)


    if __name__ == "__main__":
        main()

  extra-node-modules.json: |-
    ["node-red-contrib-xkeys_setunitid","node-red-contrib-microsoft-teams-tasks","node-red-contrib-json"]
kind: ConfigMap
metadata:
  name: abcd-node-red-flow-refresh-cm
  namespace: "node-red"
  labels:
    node-red-settings: "one"
---
# Source: node-red/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    app.kubernetes.io/name: node-red
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "7Gi"
  storageClassName: "local-path"
---
# Source: node-red/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
      - services
    verbs:
      - get
      - list
      - watch
---
# Source: node-red/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: abcd-node-red
subjects:
  - kind: ServiceAccount
    name: abcd-node-red
    namespace: "node-red"
---
# Source: node-red/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 1880
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
---
# Source: node-red/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-red
      app.kubernetes.io/instance: abcd
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-red
        app.kubernetes.io/instance: abcd
    spec:
      serviceAccountName: abcd-node-red
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        # - name: sidecar-example
        #   image: debian:latest
        #   command:
        #   - sh
        #   - -c
        #   - apt update && apt install make && wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.58tar.gz
        #     && tar zxvf bcm2835-1.58.tar.gz && cd bcm2835-1.58 && ./configure && make && sudo
        #     make check && sudo make install
        #   volumeMounts:
        #   - mountPath: /data
        #     name: data
        - image: "quay.io/kiwigrid/k8s-sidecar:1.25.0"
          imagePullPolicy: IfNotPresent
          name: node-red-sidecar
          env:
          - name: METHOD
            value: watch
          - name: SLEEP_TIME_SIDECAR
            value: 5s
          - name: LABEL
            value: node-red-settings
          - name: LABEL_VALUE
            value: "one"
          - name: FOLDER
            value: /data
          - name: SCRIPT
            value: /app/flow_refresh.py
          - name: URL
            value: http://abcd-node-red.node-rednew.svc.cluster.local:1880
          - name: USERNAME
            value: admin
          - name: PASSWORD
            value: "password"
          resources:
            limits:
              cpu: 300m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /data
              name: data
            - name: flow-refresh-script
              mountPath: /app/flow_refresh.py
              subPath: flow_refresh.py
        - name: node-red
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 10003
            runAsNonRoot: true
            runAsUser: 10003
            seccompProfile:
              type: RuntimeDefault
          image: "docker.io/nodered/node-red:3.0.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 1880
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: npmrc-volume
              mountPath: /usr/src/node-red/.npmrc
              subPath: npmrc
            - name: settings-config
              mountPath: /data/settings.js
              subPath: settings.js
            - mountPath: /keys
              name: keys
              readOnly: true
            - name: data
              mountPath: /data
          resources:
            limits:
              cpu: 500m
              memory: 5123Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: flow-refresh-script
          configMap:
            name: abcd-node-red-flow-refresh-cm
            defaultMode: 0777
        - name: keys
          secret:
            secretName: noderednew-tls
        - name: npmrc-volume
          configMap:
            name: abcd-node-red-npmrc-cm
        - name: settings-config
          configMap:
            name: settings-config
        - name: data
          persistentVolumeClaim:
            claimName: abcd-node-red
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - dietpi
---
# Source: node-red/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: abcd-node-red
  namespace: "node-red"
  labels:
    helm.sh/chart: node-red-0.27.1
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: abcd
    app.kubernetes.io/version: "3.0.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  tls:
    - hosts:
        - "nodered.systemtracker.no-ip.org"
      secretName: noderednew-tls
  rules:
    - host: "nodered.systemtracker.no-ip.org"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: abcd-node-red
                port:
                  number: 1880
---
# Source: node-red/templates/certificates.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: noderednew-tls
  namespace: node-red
spec:
  commonName: nodered.systemtracker.no-ip.org
  dnsNames:
    - nodered.systemtracker.no-ip.org
  issuerRef:
    group: certmanager.step.sm
    kind: ClusterIssuer
    # -- Name of the Issuer
    name: "ca-issuer"
  secretName: noderednew-tls